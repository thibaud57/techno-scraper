# Standards de Codage et Bonnes Pratiques - techno-scraper

Ce document définit les standards de codage, les bonnes pratiques et les conventions à suivre lors du développement du projet techno-scraper.
L'objectif est d'assurer la qualité, la maintenabilité et la cohérence du code.

## 1. Langage et Environnement

-   **Langage** : Python 3.13+
-   **Framework API** : FastAPI
-   **Environnement de développement** : Utiliser l'environnement virtuel configuré via `scripts/setup_venv.bat` ou `scripts/setup_venv.sh`.
-   **Dépendances** : Gérées via `requirements.txt`. Maintenir ce fichier à jour.

## 2. Style de Code et Formatage

-   **Style** : Respecter strictement les conventions [PEP 8](https://www.python.org/dev/peps/pep-0008/).
-   **Formatage automatique** : Utiliser `black` pour formater le code avant chaque commit.
    ```bash
    black .
    ```
-   **Tri des imports** : Utiliser `isort` pour organiser les imports.
    ```bash
    isort .
    ```
-   **Linting** : Utiliser `ruff` (ou `flake8`) pour détecter les erreurs de style et les problèmes potentiels. Configurer l'éditeur pour l'utiliser ou l'exécuter manuellement.
    ```bash
    ruff check . # Ou flake8 .
    ```
-   **Configuration** : Les configurations pour `black`, `isort`, et `ruff` peuvent être ajoutées dans `pyproject.toml` pour assurer la cohérence.

## 3. Nommage

-   **Variables, Fonctions, Méthodes, Arguments** : `snake_case` (minuscules avec underscores).
-   **Classes** : `PascalCase` (mots capitalisés collés).
-   **Modules et Packages** : `snake_case` (minuscules avec underscores).
-   **Constantes** : `UPPER_SNAKE_CASE` (majuscules avec underscores).
-   **Clarté** : Choisir des noms explicites et non ambigus. Éviter les abréviations excessives.

## 4. Structure du Projet et Conception

-   **Architecture** : Respecter la structure en couches définie dans `architecture.md` (API Layer, Business Layer, Data Layer).
-   **Modules** :
    -   `app/main.py`: Point d'entrée FastAPI.
    -   `app/core/`: Configuration centrale, sécurité, gestion des erreurs globales.
    -   `app/models/`: Modèles Pydantic pour la validation et la sérialisation des données.
    -   `app/routers/`: Endpoints API, organisés par ressource/site.
    -   `app/services/`: Logique métier, orchestration des scrapers.
    -   `app/scrapers/`: Logique spécifique au scraping de chaque site externe.
-   **Principe de Responsabilité Unique** : Chaque module, classe ou fonction doit avoir une seule responsabilité bien définie.
-   **Découplage** : Utiliser l'injection de dépendances de FastAPI (`Depends`) pour découpler les composants.

## 5. Modèles de Données (Pydantic)

-   Utiliser les modèles Pydantic (`app/models/`) pour :
    -   Valider les données des requêtes entrantes.
    -   Définir la structure des réponses API (`response_model`).
    -   Partager des schémas de données communs.
-   Définir des modèles spécifiques par site si nécessaire (ex: `soundcloud_models.py`).

## 6. Gestion des Erreurs et Logging

-   **Exceptions** :
    -   Utiliser les exceptions HTTP de FastAPI (`HTTPException`) pour les erreurs liées aux requêtes API.
    -   Définir des exceptions personnalisées dans `app/core/errors.py` pour les erreurs métier spécifiques si nécessaire.
    -   Ne pas catcher les exceptions génériques (`except Exception:`) sans raison valable. Être spécifique.
-   **Retries** : Utiliser le `RetryService` (`app/services/retry_service.py`) pour gérer les erreurs temporaires lors du scraping.
-   **Logging** :
    -   Utiliser le module `logging` standard de Python.
    -   Configurer le logging dans `app/core/config.py` ou `app/main.py`.
    -   Logger les informations pertinentes : début/fin des opérations clés, erreurs rencontrées, décisions importantes.
    -   Utiliser des niveaux de log appropriés (`DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`).

## 7. Tests

-   **Framework** : Utiliser `pytest`.
-   **Emplacement** : Placer tous les tests dans le dossier `tests/`.
-   **Types de tests** :
    -   **Tests unitaires** : Tester les composants isolés (services, fonctions utilitaires, logique des scrapers sans appels HTTP réels - utiliser des mocks).
    -   **Tests d'intégration** : Tester l'interaction entre les composants, notamment les endpoints API (utiliser `TestClient` de FastAPI).
-   **Couverture** : Viser une couverture de test élevée pour les parties critiques du code. Utiliser `pytest-cov`.
-   **Assertions** : Utiliser des assertions claires et spécifiques.

## 8. Documentation

-   **Docstrings** :
    -   Documenter toutes les fonctions publiques, classes et méthodes avec des docstrings claires (style Google ou NumPy).
    -   Pour les endpoints FastAPI, les docstrings sont utilisées pour générer la documentation OpenAPI (Swagger UI / ReDoc). Inclure des descriptions des paramètres, des réponses et des erreurs possibles.
-   **Commentaires** : Ajouter des commentaires dans le code uniquement pour expliquer des parties complexes ou non évidentes (`# Commentaire`). Éviter les commentaires redondants.
    IMPORTANT: Ne rajoute surtout pas des commentaires pour expliquer ce que tu fais ou en rajouter des inutile; uniquement sur les points critiques ou complexes comme mentionné ci-dessus.
-   **Documentation Projet** : Maintenir à jour les fichiers `README.md`, `architecture.md`, et `DEVELOPMENT.md`.

## 9. Sécurité

-   **Secrets** : Ne JAMAIS commiter de clés API, mots de passe ou autres informations sensibles dans le code source. Utiliser :
    -   Variables d'environnement chargées depuis un fichier `.env` pour le développement local (ce fichier doit être dans `.gitignore`).
    -   Secrets GitHub Actions pour l'environnement de CI/CD et de production.
-   **Validation des entrées** : Toujours valider et nettoyer les données provenant de sources externes (requêtes API, données scrapées) en utilisant les modèles Pydantic.
-   **Dépendances** : Maintenir les dépendances à jour pour corriger les vulnérabilités connues (`pip list --outdated`, outils comme `dependabot`).

## 10. Gestion de Version (Git)

-   **Branches** :
    -   `master` (ou `main`) : Branche principale, représente l'état stable/déployé.
    -   Développer les nouvelles fonctionnalités ou corrections sur des branches dédiées (ex: `feature/add-beatport-scraper`, `fix/soundcloud-login-issue`).
    -   Utiliser des Pull Requests (PR) pour merger les branches de feature/fix dans `master`.
-   **Messages de Commit** :
    -   Utiliser des messages de commit clairs, concis et descriptifs.
    -   Adopter un style cohérent, par exemple [Conventional Commits](https://www.conventionalcommits.org/). (ex: `feat: add Beatport search endpoint`, `fix: handle rate limiting in Soundcloud scraper`, `docs: update API documentation for releases`).
    -   Faire des commits atomiques : chaque commit doit représenter une modification logique unique.
-   **Pull Requests (PR)** :
    -   Décrire clairement les changements effectués dans la PR.
    -   Lier la PR aux issues correspondantes si applicable.
    -   Une revue de code par un autre membre de l'équipe est recommandée avant le merge (si possible).

## 11. Docker

-   Maintenir le `Dockerfile` optimisé (utiliser des images de base légères, multi-stage builds si pertinent).
-   Assurer que la configuration `docker-compose.yml` est correcte pour les environnements de développement et de production.

En suivant ces standards, nous visons à créer une base de code robuste, facile à comprendre, à maintenir et à faire évoluer.